function bfs(G,s)
{
var queue=[];
var u ;
queue.push(s);
while ( queue.length !==0)
{
  u=queue.shift();
  
  for( var i=0;i<G.length ;i++)
{
  if( G[i].vertex == u)
  {
    var j=i;
  }
}

for( var i=0 ;i<G[j].edges.length;i++)
{
  if(color[ G[j].edges[i] ] == "white")
  {
    color[ G[j].edges[i] ]="gray";
    d[ G[j].edges[i] ]= d[j]+1;
    p[ G[j].edges[i] ] =u;
    queue.(q.v)
  }
}

}



 return j;
}



function data(vertex,edges)
{
  this.vertex=vertex;
  this.edges=edges;
}

var G=[
  
 new data("a",["b","d"]),
  new data("b",["a","d","e"]),
  new data("d",["b","g","f"]),
  new data("e",["b","g","i"]),
  new data("f",["d","g","h"]),
  new data("g",["d","e","i","f","h"]),
  new data("h",["f","g","i"]),
  new data("i",["e","g","h"])
  
];

console.log(bfs(G,"a"));
